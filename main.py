import subprocess
import ipaddress
import threading
from queue import Queue
import socket
from time import sleep
from rich.console import Console
from rich.table import Table
from rich.text import Text
from rich.progress import Progress, BarColumn, TimeElapsedColumn, SpinnerColumn
import pyfiglet
from rich.panel import Panel

console = Console()

def create_gradient_text(text, colors):
    """–°—Ç–≤–æ—Ä—é—î –≥—Ä–∞–¥—ñ—î–Ω—Ç–Ω–∏–π —Ç–µ–∫—Å—Ç –∑ –∫–æ–ª—å–æ—Ä–æ–≤–æ—ó –ø–∞–ª—ñ—Ç—Ä–∏"""
    result = Text()
    text_len = len(text)
    color_len = len(colors)
    
    for i, char in enumerate(text):
        color_idx = int((i / text_len) * (color_len - 1))
        result.append(char, style=colors[color_idx])
    
    return result

def print_header():
    width = console.size.width
    font = "slant"
    if width < 50:
        font = "mini"
    elif width > 120:
        font = "big"

    ascii_art = pyfiglet.figlet_format("Net-Scan", font=font)
    gradient_colors = ["bright_cyan", "cyan", "blue", "bright_blue", "magenta", "bright_magenta"]
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞–¥—ñ—î–Ω—Ç–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    lines = ascii_art.split('\n')
    gradient_ascii = Text()
    
    for i, line in enumerate(lines):
        if line.strip():
            color_idx = i % len(gradient_colors)
            gradient_ascii.append(line + '\n', style=gradient_colors[color_idx])

    footer = Text("\nby @anorthseller", style="bold cyan")
    combined = gradient_ascii + footer  # –¢–µ–ø–µ—Ä –æ–±–∏–¥–≤–∞ ‚Äî Text

    panel = Panel(
        combined,
        style="bold green",
        expand=(width > 50),
        border_style="magenta"
    )
    console.clear()
    console.print(panel)

def check_internet():
    result = subprocess.run(
        ["ping", "-c", "1", "-W", "2", "google.com"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    return result.returncode == 0

def scan_network(network_cidr):
    alive_hosts = []
    threads = []
    hosts_list = list(network_cidr.hosts())

    progress = Progress(
        SpinnerColumn(),
        "[progress.description]{task.description}",
        BarColumn(),
        "[progress.percentage]{task.percentage:>3.0f}%",
        TimeElapsedColumn()
    )
    task = progress.add_task(
        "–ü—ñ–Ω–≥—É—î–º–æ IP...",
        total=len(hosts_list)
    )

    def ping_host(host):
        result = subprocess.run(
            ["ping", "-c", "1", "-W", "1", str(host)],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )
        if result.returncode == 0:
            alive_hosts.append(str(host))
        progress.update(task, advance=1)

    with progress:
        for host in hosts_list:
            t = threading.Thread(target=ping_host, args=(host,))
            t.start()
            threads.append(t)
            sleep(0.005)
        for t in threads:
            t.join()
    return alive_hosts

def get_hostname(ip):
    try:
        return socket.gethostbyaddr(ip)[0]
    except:
        return "N/A"

def grab_banner(host, port):
    try:
        sock = socket.socket()
        sock.settimeout(2)
        sock.connect((host, port))
        
        if port in (80, 8080):
            sock.sendall(b"GET / HTTP/1.0\r\n\r\n")
        elif port == 21:  # FTP
            # –ø—Ä–æ—Å—Ç–æ —á–µ–∫–∞—î–º–æ –±–∞–Ω–µ—Ä –ø—ñ—Å–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            pass
        elif port == 22:  # SSH
            # —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–∏–Ω–µ–Ω –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –±–∞–Ω–µ—Ä —Å–∞–º
            pass
        elif port == 25:  # SMTP
            # —Å–µ—Ä–≤–µ—Ä –Ω–∞–¥—Å–∏–ª–∞—î –±–∞–Ω–µ—Ä
            pass
        elif port == 23:  # Telnet
            # —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ –ø–æ—Å–ª–∞—Ç–∏ –±–∞–Ω–µ—Ä
            pass

        banner = sock.recv(1024).decode(errors="ignore").strip()
        sock.close()

        if banner:
            first_line = banner.splitlines()[0]
            return first_line
    except Exception as e:
        # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: print(f"Banner error on {host}:{port} - {e}")
        pass
    return "N/A"


def check_weak_login(host, port=23):
    try:
        sock = socket.socket()
        sock.settimeout(2)
        sock.connect((host, port))
        sock.sendall(b"admin\r\n")
        sock.sendall(b"admin\r\n")
        response = sock.recv(1024).decode(errors="ignore")
        sock.close()
        if "incorrect" not in response.lower():
            return True
    except:
        pass
    return False

def scan_ports_with_services(host, port_start, port_end):
    open_ports = []
    queue = Queue()
    ports = range(port_start, port_end + 1)

    progress = Progress(
        SpinnerColumn(),
        "[progress.description]{task.description}",
        BarColumn(),
        "[progress.percentage]{task.percentage:>3.0f}%",
        TimeElapsedColumn()
    )
    task = progress.add_task(
        f"–°–∫–∞–Ω—É—î–º–æ –ø–æ—Ä—Ç–∏ {port_start}-{port_end} –Ω–∞ {host}",
        total=len(ports)
    )

    def worker():
        while True:
            port = queue.get()
            if port is None:
                break
            try:
                sock = socket.socket()
                sock.settimeout(0.3)
                sock.connect((host, port))
                service = grab_banner(host, port)
                open_ports.append((port, service))
                sock.close()
            except:
                pass
            progress.update(task, advance=1)
            queue.task_done()

    threads = []
    with progress:
        for _ in range(50):
            t = threading.Thread(target=worker, daemon=True)
            t.start()
            threads.append(t)

        for port in ports:
            queue.put(port)

        queue.join()

        for _ in threads:
            queue.put(None)

        for t in threads:
            t.join()

    return open_ports

def menu():
    width = console.size.width
    menu_panel = Panel(
        "[bold cyan]üìã –©–æ –±—É–¥–µ–º–æ —Ä–æ–±–∏—Ç–∏?[/bold cyan]\n\n"
        "[green][1][/green] üì° [bold]–ü—ñ–Ω–≥ –º–µ—Ä–µ–∂—ñ[/bold]\n"
        "[green][2][/green] üîç [bold]–°–∫–∞–Ω + –ø–æ—Ä—Ç–∏ (1-15000)[/bold]\n"
        "[green][3][/green] ‚öôÔ∏è [bold]–°–∫–∞–Ω –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏[/bold]\n"
        "[red][0][/red] üö™ [bold]–í–∏—Ö—ñ–¥[/bold]",
        title="[bold green]–ú–µ–Ω—é[/bold green]",
        border_style="blue",
        expand=(width > 50)
    )
    console.print(menu_panel)
    choice = console.input("[bold yellow]üî∑ –¢–≤—ñ–π –≤–∏–±—ñ—Ä: [/bold yellow]")
    return choice.strip()

def main():
    if not check_internet():
        console.print(
            Panel("[bold red]‚ùå –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç—É –Ω–µ–º–∞—î! –ü–µ—Ä–µ–≤—ñ—Ä –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è.[/bold red]", border_style="red")
        )
        return

    console.print(
        Panel("[bold green]‚úÖ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—Ä–∞—Ü—é—î! –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ‚Ä¶[/bold green]", border_style="green")
    )

    while True:
        choice = menu()
        if choice == "0":
            console.print(Panel("[bold magenta]üëã –í–∏—Ö—ñ–¥...[/bold magenta]", border_style="magenta"))
            break
        elif choice == "1":
            network_cidr = ipaddress.ip_network("192.168.1.0/24")
            alive_hosts = scan_network(network_cidr)

            table = Table(
                title="üéØ [bold yellow]–ñ–∏–≤—ñ —Ö–æ—Å—Ç–∏[/bold yellow]",
                border_style="green"
            )
            table.add_column("‚Ññ", justify="right", style="cyan", no_wrap=True)
            table.add_column("IP", style="green", no_wrap=True)

            for idx, host in enumerate(alive_hosts, 1):
                table.add_row(str(idx), host)

            console.print(table)

        elif choice == "2":
            network_cidr = ipaddress.ip_network("192.168.1.0/24")
            alive_hosts = scan_network(network_cidr)

            for idx, host in enumerate(alive_hosts, 1):
                console.print(
                    Panel(f"[bold green]{idx}. –°–∫–∞–Ω—É—é –ø–æ—Ä—Ç–∏ 1-15000 –Ω–∞ {host}‚Ä¶[/bold green]", border_style="cyan")
                )
                open_ports = scan_ports_with_services(host, 1, 15000)

                if open_ports:
                    table = Table(
                        title=f"üéØ [bold]–í—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ—Ä—Ç–∏ –Ω–∞ {host}[/bold]",
                        border_style="bright_magenta"
                    )
                    table.add_column("–ü–æ—Ä—Ç", style="cyan", justify="right")
                    table.add_column("–°–µ—Ä–≤—ñ—Å/–ë–∞–Ω–µ—Ä", style="magenta")

                    for port, service in open_ports:
                        table.add_row(str(port), service)

                    console.print(table)
                else:
                    console.print(
                        Panel(f"[red]‚ùå –í—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ—Ä—Ç—ñ–≤ –Ω–∞ {host} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ[/red]", border_style="red")
                    )

        elif choice == "3":
            cidr_str = console.input("[yellow]–í–≤–µ–¥–∏ –º–µ—Ä–µ–∂—É (CIDR, –Ω–∞–ø—Ä. 192.168.1.0/24): [/yellow]").strip()
            port_start = int(console.input("[yellow]–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –ø–æ—Ä—Ç: [/yellow]"))
            port_end = int(console.input("[yellow]–ö—ñ–Ω—Ü–µ–≤–∏–π –ø–æ—Ä—Ç: [/yellow]"))
            network_cidr = ipaddress.ip_network(cidr_str)

            alive_hosts = scan_network(network_cidr)

            for idx, host in enumerate(alive_hosts, 1):
                hostname = get_hostname(host)
                console.print(
                    Panel(f"[bold green]{idx}. –°–∫–∞–Ω—É—é –ø–æ—Ä—Ç–∏ –Ω–∞ {host} ({hostname})‚Ä¶[/bold green]", border_style="cyan")
                )
                open_ports = scan_ports_with_services(host, port_start, port_end)

                if open_ports:
                    table = Table(
                        title=f"üéØ {host} ({hostname})",
                        border_style="bright_magenta"
                    )
                    table.add_column("–ü–æ—Ä—Ç", style="cyan")
                    table.add_column("–°–µ—Ä–≤—ñ—Å/–ë–∞–Ω–µ—Ä", style="magenta")
                    for port, service in open_ports:
                        table.add_row(str(port), service)
                    console.print(table)

                    if check_weak_login(host):
                        console.print(
                            Panel(f"[bold red]‚ö†Ô∏è –°–ª–∞–±–∫–∏–π –ª–æ–≥—ñ–Ω admin:admin –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ {host}[/bold red]", border_style="red")
                        )
                else:
                    console.print(
                        Panel(f"[bold red]–í—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ—Ä—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ {host}[/bold red]", border_style="red")
                    )

        else:
            console.print(Panel("[bold red]–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.[/bold red]", border_style="red"))

print_header()

if __name__ == "__main__":
    main()
