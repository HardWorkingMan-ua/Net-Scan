#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import subprocess
import ipaddress
import threading
from queue import Queue
import socket
from time import sleep
import json
import os
from datetime import datetime
from rich.console import Console
from rich.table import Table
from rich.progress import Progress, BarColumn, TimeElapsedColumn, SpinnerColumn, TaskProgressColumn
from rich.panel import Panel
from rich.columns import Columns
from rich.text import Text
from rich.live import Live
from rich.layout import Layout
from rich.tree import Tree
from rich.align import Align
from rich.rule import Rule
import pyfiglet

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–Ω—Å–æ–ª—ñ –∑ –ø–æ–≤–Ω–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∫–æ–ª—å–æ—Ä—ñ–≤
console = Console(force_terminal=True, color_system="truecolor")

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
scan_stats = {
    'total_hosts': 0,
    'alive_hosts': 0,
    'total_ports': 0,
    'open_ports': 0,
    'scan_time': 0,
    'vulnerabilities': 0
}

def create_gradient_text(text, colors):
    """–°—Ç–≤–æ—Ä—é—î –≥—Ä–∞–¥—ñ—î–Ω—Ç–Ω–∏–π —Ç–µ–∫—Å—Ç –∑ –∫–æ–ª—å–æ—Ä–æ–≤–æ—ó –ø–∞–ª—ñ—Ç—Ä–∏"""
    result = Text()
    text_len = len(text)
    color_len = len(colors)
    
    for i, char in enumerate(text):
        color_idx = int((i / text_len) * (color_len - 1))
        result.append(char, style=colors[color_idx])
    
    return result

def print_header():
    """–í–∏–≤–æ–¥–∏—Ç—å —Å—Ç–∏–ª—å–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é"""
    width = console.size.width
    height = console.size.height
    
    # –í–∏–±—ñ—Ä —à—Ä–∏—Ñ—Ç—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–æ–∑–º—ñ—Ä—É —Ç–µ—Ä–º—ñ–Ω–∞–ª—É
    font = "slant"
    if width < 60:
        font = "mini"
    elif width > 140:
        font = "big"
    
    console.clear()
    
    # ASCII –∞—Ä—Ç –∑ –≥—Ä–∞–¥—ñ—î–Ω—Ç–æ–º
    ascii_art = pyfiglet.figlet_format("Net-Scan", font=font)
    gradient_colors = ["bright_cyan", "cyan", "blue", "bright_blue", "magenta", "bright_magenta"]
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞–¥—ñ—î–Ω—Ç–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    lines = ascii_art.split('\n')
    gradient_ascii = Text()
    
    for i, line in enumerate(lines):
        if line.strip():
            color_idx = i % len(gradient_colors)
            gradient_ascii.append(line + '\n', style=gradient_colors[color_idx])
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ layout
    layout = Layout()
    layout.split_column(
        Layout(name="header", size=len(lines) + 5),
        Layout(name="info", size=8),
        Layout(name="stats", size=6)
    )
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    header_panel = Panel(
        Align.center(gradient_ascii),
        style="bold bright_white",
        border_style="bright_yellow",
        subtitle="[bold bright_cyan]Net-scan Beta[/bold bright_cyan]",
        subtitle_align="center"
    )
    
    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–µ—Ä—Å—ñ—é —Ç–∞ –∞–≤—Ç–æ—Ä–∞
    info_text = Text.assemble(
        ("üöÄ –í–µ—Ä—Å—ñ—è: ", "bright_green"),
        ("1.5", "bold bright_yellow"),
        ("\nüíª –ê–≤—Ç–æ—Ä–∏: ", "bright_green"),
        ("@anorthseller, @userevgeny", "bold bright_cyan"),
        ("\nüïê –ß–∞—Å –∑–∞–ø—É—Å–∫—É: ", "bright_green"),
        (datetime.now().strftime("%d.%m.%Y %H:%M:%S"), "bold bright_white"),
        ("\nüåü –°—Ç–∞—Ç—É—Å: ", "bright_green"),
        ("–ì–æ—Ç–æ–≤–∏–π –¥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è!", "bold bright_green")
    )
    
    info_panel = Panel(
        Align.center(info_text),
        title="[bold bright_magenta]üìä –°–∏—Å—Ç–µ–º–Ω–∞ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è[/bold bright_magenta]",
        border_style="bright_green",
        padding=(1, 2)
    )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø–æ—Ä–æ–∂–Ω—è –Ω–∞ –ø–æ—á–∞—Ç–∫—É)
    stats_text = Text.assemble(
        ("üìà –í—ñ–¥—Å–∫–∞–Ω–æ–≤–∞–Ω–æ —Ö–æ—Å—Ç—ñ–≤: ", "bright_blue"),
        ("0", "bold bright_white"),
        (" | üéØ –ñ–∏–≤–∏—Ö —Ö–æ—Å—Ç—ñ–≤: ", "bright_blue"),
        ("0", "bold bright_green"),
        (" | üîç –í—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ—Ä—Ç—ñ–≤: ", "bright_blue"),
        ("0", "bold bright_red"),
        (" | ‚ö†Ô∏è –í—Ä–∞–∑–ª–∏–≤–æ—Å—Ç–µ–π: ", "bright_blue"),
        ("0", "bold bright_yellow")
    )
    
    stats_panel = Panel(
        Align.center(stats_text),
        title="[bold bright_yellow]üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è[/bold bright_yellow]",
        border_style="bright_blue",
        padding=(1, 2)
    )
    
    layout["header"].update(header_panel)
    layout["info"].update(info_panel)
    layout["stats"].update(stats_panel)
    
    console.print(layout)
    console.print()

def check_internet():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∑ –∫—Ä–∞—Å–∏–≤–∏–º —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º"""
    with console.status("[bold bright_cyan]üåê –ü–µ—Ä–µ–≤—ñ—Ä—è—é –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É...", spinner="dots12"):
        sleep(0.5)  # –î–ª—è –¥—Ä–∞–º–∞—Ç–∏—á–Ω–æ–≥–æ –µ—Ñ–µ–∫—Ç—É
        result = subprocess.run(
            ["ping", "-c", "1", "-W", "2", "8.8.8.8"],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )
        sleep(0.5)
    
    if result.returncode == 0:
        console.print(Panel(
            "[bold bright_green]‚úÖ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–µ![/bold bright_green]\n"
            "[bright_green]üì° DNS —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π[/bright_green]\n"
            "[bright_green]üöÄ –ì–æ—Ç–æ–≤–∏–π –¥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –º–µ—Ä–µ–∂—ñ[/bright_green]",
            title="[bold bright_green]üåê –°—Ç–∞—Ç—É—Å –ú–µ—Ä–µ–∂—ñ[/bold bright_green]",
            border_style="bright_green",
            padding=(1, 2)
        ))
        return True
    else:
        console.print(Panel(
            "[bold bright_red]‚ùå –ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É![/bold bright_red]\n"
            "[bright_red]üîå –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –º–µ—Ä–µ–∂–µ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è[/bright_red]\n"
            "[bright_red]üîß –õ–æ–∫–∞–ª—å–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏[/bright_red]",
            title="[bold bright_red]üåê –ü–æ–º–∏–ª–∫–∞ –ú–µ—Ä–µ–∂—ñ[/bold bright_red]",
            border_style="bright_red",
            padding=(1, 2)
        ))
        return False

def scan_network(network_cidr):
    """–°–∫–∞–Ω—É—î –º–µ—Ä–µ–∂—É –∑ –∫—Ä–∞—Å–∏–≤–∏–º –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä–æ–º —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é"""
    global scan_stats
    alive_hosts = []
    threads = []
    hosts_list = list(network_cidr.hosts())
    scan_stats['total_hosts'] = len(hosts_list)
    
    start_time = datetime.now()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –∑ –º–Ω–æ–∂–∏–Ω–Ω–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
    progress = Progress(
        SpinnerColumn(style="bright_cyan"),
        "[progress.description]{task.description}",
        BarColumn(bar_width=None, complete_style="bright_green", finished_style="bright_green"),
        TaskProgressColumn(),
        "[progress.percentage]{task.percentage:>3.0f}%",
        TimeElapsedColumn(),
        console=console,
        expand=True
    )
    
    task = progress.add_task(
        f"[bold bright_cyan]üîç –°–∫–∞–Ω—É—é –º–µ—Ä–µ–∂—É {network_cidr}...[/bold bright_cyan]",
        total=len(hosts_list)
    )
    
    def ping_host(host):
        result = subprocess.run(
            ["ping", "-c", "1", "-W", "1", str(host)],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )
        if result.returncode == 0:
            alive_hosts.append(str(host))
            scan_stats['alive_hosts'] += 1
        progress.update(task, advance=1)
    
    with progress:
        for host in hosts_list:
            t = threading.Thread(target=ping_host, args=(host,))
            t.start()
            threads.append(t)
            sleep(0.01)  # –¢—Ä–æ—Ö–∏ –∑–∞—Ç—Ä–∏–º–∫–∏ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
        
        for t in threads:
            t.join()
    
    scan_stats['scan_time'] = (datetime.now() - start_time).total_seconds()
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
    if alive_hosts:
        console.print(Panel(
            f"[bold bright_green]üéØ –ó–Ω–∞–π–¥–µ–Ω–æ {len(alive_hosts)} –∂–∏–≤–∏—Ö —Ö–æ—Å—Ç—ñ–≤ –∑ {len(hosts_list)}[/bold bright_green]\n"
            f"[bright_green]‚è±Ô∏è –ß–∞—Å —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {scan_stats['scan_time']:.2f} —Å–µ–∫—É–Ω–¥[/bright_green]\n"
            f"[bright_green]üìä –®–≤–∏–¥–∫—ñ—Å—Ç—å: {len(hosts_list)/scan_stats['scan_time']:.1f} —Ö–æ—Å—Ç—ñ–≤/—Å–µ–∫[/bright_green]",
            title="[bold bright_green]üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è[/bold bright_green]",
            border_style="bright_green",
            padding=(1, 2)
        ))
    else:
        console.print(Panel(
            "[bold bright_red]‚ùå –ñ–∏–≤–∏—Ö —Ö–æ—Å—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ[/bold bright_red]\n"
            "[bright_red]üîç –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –º–µ—Ä–µ–∂—É[/bright_red]",
            title="[bold bright_red]üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è[/bold bright_red]",
            border_style="bright_red",
            padding=(1, 2)
        ))
    
    return alive_hosts

def get_hostname(ip):
    """–û—Ç—Ä–∏–º—É—î hostname –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º"""
    try:
        return socket.gethostbyaddr(ip)[0]
    except:
        return "‚ùì –ù–µ–≤—ñ–¥–æ–º–∏–π —Ö–æ—Å—Ç"

def grab_banner(host, port):
    """–ì—Ä–∞–±–∏—Ç—å –±–∞–Ω–µ—Ä –∑ –ø–æ—Ä—Ç—É –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é"""
    try:
        sock = socket.socket()
        sock.settimeout(2)
        sock.connect((host, port))
        
        if port == 80:
            sock.sendall(b"GET / HTTP/1.1\r\nHost: " + host.encode() + b"\r\n\r\n")
        elif port == 443:
            return "üîí HTTPS"
        elif port == 22:
            pass  # SSH –Ω–∞–¥—Å–∏–ª–∞—î –±–∞–Ω–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
        elif port == 21:
            pass  # FTP –Ω–∞–¥—Å–∏–ª–∞—î –±–∞–Ω–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
        elif port == 25:
            pass  # SMTP –Ω–∞–¥—Å–∏–ª–∞—î –±–∞–Ω–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
        
        banner = sock.recv(1024).decode(errors="ignore").strip()
        sock.close()
        
        if banner:
            first_line = banner.splitlines()[0]
            # –û–±—Ä—ñ–∑–∞—î–º–æ –¥–æ–≤–≥—ñ –±–∞–Ω–µ—Ä–∏
            if len(first_line) > 60:
                first_line = first_line[:60] + "..."
            return first_line
    except:
        pass
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—ñ–¥–æ–º—ñ —Å–µ—Ä–≤—ñ—Å–∏
    common_ports = {
        21: "üóÇÔ∏è FTP",
        22: "üîê SSH",
        23: "üìû Telnet",
        25: "üìß SMTP",
        53: "üåê DNS",
        80: "üåç HTTP",
        110: "üì¨ POP3",
        143: "üìÆ IMAP",
        443: "üîí HTTPS",
        993: "üîê IMAPS",
        995: "üîê POP3S"
    }
    
    return common_ports.get(port, "‚ùì –ù–µ–≤—ñ–¥–æ–º–∏–π —Å–µ—Ä–≤—ñ—Å")

def check_weak_login(host, port=23):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å–ª–∞–±–∫—ñ –ø–∞—Ä–æ–ª—ñ"""
    weak_combos = [
        ("admin", "admin"),
        ("admin", "password"),
        ("admin", ""),
        ("root", "root"),
        ("user", "user")
    ]
    
    for username, password in weak_combos:
        try:
            sock = socket.socket()
            sock.settimeout(3)
            sock.connect((host, port))
            
            if port == 23:  # Telnet
                sock.recv(1024)  # –ß–∏—Ç–∞—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
                sock.sendall(f"{username}\r\n".encode())
                sleep(0.5)
                sock.sendall(f"{password}\r\n".encode())
                sleep(0.5)
                response = sock.recv(1024).decode(errors="ignore")
                sock.close()
                
                if "incorrect" not in response.lower() and "failed" not in response.lower():
                    return f"‚ö†Ô∏è {username}:{password}"
            
        except:
            pass
    
    return None

def scan_ports_with_services(host, port_start, port_end):
    """–°–∫–∞–Ω—É—î –ø–æ—Ä—Ç–∏ –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é"""
    global scan_stats
    open_ports = []
    queue = Queue()
    ports = range(port_start, port_end + 1)
    scan_stats['total_ports'] += len(ports)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –∑ –∫—Ä–∞—Å–∏–≤–æ—é –∞–Ω—ñ–º–∞—Ü—ñ—î—é
    progress = Progress(
        SpinnerColumn(style="bright_magenta"),
        "[progress.description]{task.description}",
        BarColumn(bar_width=None, complete_style="bright_magenta", finished_style="bright_magenta"),
        TaskProgressColumn(),
        "[progress.percentage]{task.percentage:>3.0f}%",
        TimeElapsedColumn(),
        console=console,
        expand=True
    )
    
    task = progress.add_task(
        f"[bold bright_magenta]üîç –°–∫–∞–Ω—É—é –ø–æ—Ä—Ç–∏ {port_start}-{port_end} –Ω–∞ {host}[/bold bright_magenta]",
        total=len(ports)
    )
    
    def worker():
        while True:
            port = queue.get()
            if port is None:
                break
            try:
                sock = socket.socket()
                sock.settimeout(0.5)
                sock.connect((host, port))
                service = grab_banner(host, port)
                open_ports.append((port, service))
                scan_stats['open_ports'] += 1
                sock.close()
            except:
                pass
            progress.update(task, advance=1)
            queue.task_done()
    
    threads = []
    with progress:
        # –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ç–æ–∫—ñ–≤
        thread_count = min(100, len(ports))
        for _ in range(thread_count):
            t = threading.Thread(target=worker, daemon=True)
            t.start()
            threads.append(t)
        
        for port in ports:
            queue.put(port)
        
        queue.join()
        
        for _ in threads:
            queue.put(None)
        
        for t in threads:
            t.join()
    
    return open_ports

def create_host_tree(alive_hosts):
    """–°—Ç–≤–æ—Ä—é—î –¥–µ—Ä–µ–≤–æ —Ö–æ—Å—Ç—ñ–≤ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    tree = Tree("üåê [bold bright_cyan]–ê–∫—Ç–∏–≤–Ω—ñ —Ö–æ—Å—Ç–∏ –≤ –º–µ—Ä–µ–∂—ñ[/bold bright_cyan]")
    
    for i, host in enumerate(alive_hosts, 1):
        hostname = get_hostname(host)
        host_branch = tree.add(f"[bold bright_green]{i}. {host}[/bold bright_green]")
        host_branch.add(f"[bright_yellow]üè∑Ô∏è Hostname: {hostname}[/bright_yellow]")
        host_branch.add(f"[bright_blue]üìç –°—Ç–∞—Ç—É—Å: –û–Ω–ª–∞–π–Ω[/bright_blue]")
    
    return tree

def display_port_results(host, hostname, open_ports):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø–æ—Ä—Ç—ñ–≤ —É –∫—Ä–∞—Å–∏–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ"""
    if not open_ports:
        console.print(Panel(
            f"[bold bright_red]‚ùå –í—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ—Ä—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ {host}[/bold bright_red]\n"
            f"[bright_red]üîí –•–æ—Å—Ç –º–æ–∂–µ –±—É—Ç–∏ –∑–∞—Ö–∏—â–µ–Ω–∏–º —Ñ–∞—î—Ä–≤–æ–ª–æ–º[/bright_red]",
            title=f"[bold bright_red]üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è {host}[/bold bright_red]",
            border_style="bright_red",
            padding=(1, 2)
        ))
        return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –¥–ª—è –ø–æ—Ä—Ç—ñ–≤
    table = Table(
        title=f"üéØ [bold bright_magenta]–í—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ—Ä—Ç–∏ –Ω–∞ {host}[/bold bright_magenta]",
        title_style="bold bright_magenta",
        border_style="bright_magenta",
        header_style="bold bright_white",
        show_lines=True
    )
    
    table.add_column("‚Ññ", style="bright_cyan", justify="center", width=4)
    table.add_column("–ü–æ—Ä—Ç", style="bright_yellow", justify="center", width=8)
    table.add_column("–°–µ—Ä–≤—ñ—Å", style="bright_green", width=20)
    table.add_column("–ë–∞–Ω–µ—Ä/–í—ñ–¥–ø–æ–≤—ñ–¥—å", style="bright_blue", width=50)
    table.add_column("–†–∏–∑–∏–∫", style="bright_red", justify="center", width=10)
    
    for i, (port, service) in enumerate(open_ports, 1):
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä—ñ–≤–µ–Ω—å —Ä–∏–∑–∏–∫—É
        risk_level = "üü¢ –ù–∏–∑—å–∫–∏–π"
        if port in [21, 23, 135, 139, 445]:
            risk_level = "üî¥ –í–∏—Å–æ–∫–∏–π"
        elif port in [22, 80, 443]:
            risk_level = "üü° –°–µ—Ä–µ–¥–Ω—ñ–π"
        
        table.add_row(
            str(i),
            str(port),
            service.split()[0] if service else "‚ùì",
            service,
            risk_level
        )
    
    console.print(table)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ —Å–ª–∞–±–∫—ñ –ø–∞—Ä–æ–ª—ñ
    if any(port in [21, 22, 23] for port, _ in open_ports):
        console.print(Panel(
            "[bold bright_yellow]üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é –Ω–∞ —Å–ª–∞–±–∫—ñ –ø–∞—Ä–æ–ª—ñ...[/bold bright_yellow]",
            border_style="bright_yellow"
        ))
        
        for port, _ in open_ports:
            if port in [21, 22, 23]:
                weak_creds = check_weak_login(host, port)
                if weak_creds:
                    scan_stats['vulnerabilities'] += 1
                    console.print(Panel(
                        f"[bold bright_red]‚ö†Ô∏è –í–†–ê–ó–õ–ò–í–Ü–°–¢–¨ –ó–ù–ê–ô–î–ï–ù–ê![/bold bright_red]\n"
                        f"[bright_red]üéØ –•–æ—Å—Ç: {host}[/bright_red]\n"
                        f"[bright_red]üîì –ü–æ—Ä—Ç: {port}[/bright_red]\n"
                        f"[bright_red]üîë –ö—Ä–µ–¥–∏: {weak_creds}[/bright_red]\n"
                        f"[bright_red]‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å![/bright_red]",
                        title="[bold bright_red]üö® –ö–†–ò–¢–ò–ß–ù–ê –í–†–ê–ó–õ–ò–í–Ü–°–¢–¨[/bold bright_red]",
                        border_style="bright_red",
                        padding=(1, 2)
                    ))

def show_advanced_menu():
    """–ü–æ–∫–∞–∑—É—î —Ä–æ–∑—à–∏—Ä–µ–Ω–µ –º–µ–Ω—é –∑ –æ–ø—Ü—ñ—è–º–∏"""
    menu_options = [
        ("1", "üì°", "–®–≤–∏–¥–∫–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è", "–ü—ñ–Ω–≥ –º–µ—Ä–µ–∂—ñ 192.168.1.0/24"),
        ("2", "üîç", "–ì–ª–∏–±–æ–∫–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è", "–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è + –ø–æ—Ä—Ç–∏ (1-1000)"),
        ("3", "‚öôÔ∏è", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", "–ö–∞—Å—Ç–æ–º–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"),
        ("4", "üéØ", "–¶—ñ–ª—å–æ–≤–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è", "–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞"),
        ("5", "üìä", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"),
        ("6", "üíæ", "–ï–∫—Å–ø–æ—Ä—Ç", "–ó–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏"),
        ("0", "üö™", "–í–∏—Ö—ñ–¥", "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–±–æ—Ç—É")
    ]
    
    console.print(Rule("[bold bright_cyan]üéÆ –ì–æ–ª–æ–≤–Ω–µ –ú–µ–Ω—é[/bold bright_cyan]", style="bright_cyan"))
    console.print()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—ñ—Ç–∫—É –∑ –æ–ø—Ü—ñ—è–º–∏
    panels = []
    for option, icon, title, desc in menu_options:
        color = "bright_green" if option != "0" else "bright_red"
        panels.append(Panel(
            f"[bold {color}]{icon}[/bold {color}]\n"
            f"[bold bright_white]{title}[/bold bright_white]\n"
            f"[dim bright_white]{desc}[/dim bright_white]",
            title=f"[bold {color}]{option}[/bold {color}]",
            border_style=color,
            padding=(1, 1),
            width=25
        ))
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
    console.print(Columns(panels[:4], equal=True, expand=True))
    console.print()
    console.print(Columns(panels[4:], equal=True, expand=True))
    console.print()
    
    choice = console.input("[bold bright_yellow]üéØ –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é: [/bold bright_yellow]")
    return choice.strip()

def show_statistics():
    """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"""
    stats_table = Table(
        title="üìä [bold bright_cyan]–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è[/bold bright_cyan]",
        border_style="bright_cyan",
        header_style="bold bright_white",
        show_lines=True
    )
    
    stats_table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="bright_yellow", width=25)
    stats_table.add_column("–ó–Ω–∞—á–µ–Ω–Ω—è", style="bright_green", width=20)
    stats_table.add_column("–î–µ—Ç–∞–ª—ñ", style="bright_blue", width=30)
    
    stats_table.add_row(
        "üéØ –í—ñ–¥—Å–∫–∞–Ω–æ–≤–∞–Ω–æ —Ö–æ—Å—Ç—ñ–≤",
        str(scan_stats['total_hosts']),
        f"IP –∞–¥—Ä–µ—Å–∏ –≤ –º–µ—Ä–µ–∂—ñ"
    )
    
    stats_table.add_row(
        "‚úÖ –ñ–∏–≤–∏—Ö —Ö–æ—Å—Ç—ñ–≤",
        str(scan_stats['alive_hosts']),
        f"{scan_stats['alive_hosts']/max(scan_stats['total_hosts'], 1)*100:.1f}% –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ"
    )
    
    stats_table.add_row(
        "üîç –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –ø–æ—Ä—Ç—ñ–≤",
        str(scan_stats['total_ports']),
        f"–í—Å—å–æ–≥–æ TCP –ø–æ—Ä—Ç—ñ–≤"
    )
    
    stats_table.add_row(
        "üîì –í—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ—Ä—Ç—ñ–≤",
        str(scan_stats['open_ports']),
        f"{scan_stats['open_ports']/max(scan_stats['total_ports'], 1)*100:.1f}% –≤—ñ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏—Ö"
    )
    
    stats_table.add_row(
        "‚ö†Ô∏è –í—Ä–∞–∑–ª–∏–≤–æ—Å—Ç–µ–π",
        str(scan_stats['vulnerabilities']),
        f"–ó–Ω–∞–π–¥–µ–Ω–æ —Å–ª–∞–±–∫–∏—Ö –ø–∞—Ä–æ–ª—ñ–≤"
    )
    
    stats_table.add_row(
        "‚è±Ô∏è –ß–∞—Å —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è",
        f"{scan_stats['scan_time']:.2f} —Å–µ–∫",
        f"–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"
    )
    
    console.print(stats_table)

def save_results_to_file(results, filename=None):
    """–ó–±–µ—Ä—ñ–≥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —É —Ñ–∞–π–ª"""
    if filename is None:
        filename = f"scan_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    
    # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ IPv4Network –æ–±'—î–∫—Ç–∏ –Ω–∞ —Ä—è–¥–∫–∏
    serializable_results = []
    for item in results:
        scan_type, target, data = item
        
        # –Ø–∫—â–æ target - —Ü–µ –º–µ—Ä–µ–∂–∞, –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ —Ä—è–¥–æ–∫
        if isinstance(target, ipaddress.IPv4Network):
            target = str(target)
        
        serializable_results.append((scan_type, target, data))
    
    scan_data = {
        'timestamp': datetime.now().isoformat(),
        'statistics': scan_stats,
        'results': serializable_results
    }
    
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(scan_data, f, indent=2, ensure_ascii=False)
        
        console.print(Panel(
            f"[bold bright_green]‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ![/bold bright_green]\n"
            f"[bright_green]üìÅ –§–∞–π–ª: {filename}[/bright_green]\n"
            f"[bright_green]üìä –†–æ–∑–º—ñ—Ä: {os.path.getsize(filename)} –±–∞–π—Ç[/bright_green]",
            title="[bold bright_green]üíæ –ï–∫—Å–ø–æ—Ä—Ç –ó–∞–≤–µ—Ä—à–µ–Ω–æ[/bold bright_green]",
            border_style="bright_green",
            padding=(1, 2)
        ))
        return True
    except Exception as e:
        console.print(Panel(
            f"[bold bright_red]‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è![/bold bright_red]\n"
            f"[bright_red]üìÅ –§–∞–π–ª: {filename}[/bright_red]\n"
            f"[bright_red]üö´ –ü–æ–º–∏–ª–∫–∞: {str(e)}[/bright_red]",
            title="[bold bright_red]üíæ –ü–æ–º–∏–ª–∫–∞ –ï–∫—Å–ø–æ—Ä—Ç—É[/bold bright_red]",
            border_style="bright_red",
            padding=(1, 2)
        ))
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
    print_header()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç
    if not check_internet():
        console.input("\n[bold bright_yellow]‚è∏Ô∏è –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...[/bold bright_yellow]")
    
    results_history = []
    
    while True:
        choice = show_advanced_menu()
        
        if choice == "0":
            console.print(Panel(
                "[bold bright_magenta]üëã –î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Net-Scan![/bold bright_magenta]\n"
                "[bright_magenta]üöÄ –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è![/bright_magenta]",
                title="[bold bright_magenta]üö™ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –†–æ–±–æ—Ç–∏[/bold bright_magenta]",
                border_style="bright_magenta",
                padding=(1, 2)
            ))
            break
            
        elif choice == "1":
            # –®–≤–∏–¥–∫–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
            network_cidr = ipaddress.ip_network("192.168.1.0/24")
            alive_hosts = scan_network(network_cidr)
            
            if alive_hosts:
                results_history.append(('ping', network_cidr, alive_hosts))
                tree = create_host_tree(alive_hosts)
                console.print(tree)
            
        elif choice == "2":
            # –ì–ª–∏–±–æ–∫–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
            network_cidr = ipaddress.ip_network("192.168.1.0/24")
            alive_hosts = scan_network(network_cidr)
            
            if alive_hosts:
                results_history.append(('deep_scan', network_cidr, alive_hosts))
                for host in alive_hosts:
                    hostname = get_hostname(host)
                    open_ports = scan_ports_with_services(host, 1, 1000)
                    display_port_results(host, hostname, open_ports)
                    console.print()
            
        elif choice == "3":
            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            try:
                cidr_str = console.input(
                    "[bold bright_yellow]üåê –í–≤–µ–¥—ñ—Ç—å CIDR –º–µ—Ä–µ–∂—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 192.168.1.0/24): [/bold bright_yellow]"
                ).strip()
                
                port_start = int(console.input(
                    "[bold bright_yellow]üîç –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –ø–æ—Ä—Ç (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1): [/bold bright_yellow]"
                ))
                
                port_end = int(console.input(
                    "[bold bright_yellow]üîç –ö—ñ–Ω—Ü–µ–≤–∏–π –ø–æ—Ä—Ç (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1000): [/bold bright_yellow]"
                ))
                
                network_cidr = ipaddress.ip_network(cidr_str)
                alive_hosts = scan_network(network_cidr)
                
                if alive_hosts:
                    results_history.append(('custom_scan', network_cidr, alive_hosts))
                    for host in alive_hosts:
                        hostname = get_hostname(host)
                        open_ports = scan_ports_with_services(host, port_start, port_end)
                        display_port_results(host, hostname, open_ports)
                        console.print()
                        
            except ValueError as e:
                console.print(Panel(
                    f"[bold bright_red]‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ![/bold bright_red]\n"
                    f"[bright_red]üö´ –ü–æ–º–∏–ª–∫–∞: {str(e)}[/bright_red]",
                    title="[bold bright_red]üö® –ü–æ–º–∏–ª–∫–∞ –í–≤–µ–¥–µ–Ω–Ω—è[/bold bright_red]",
                    border_style="bright_red"
                ))
            except Exception as e:
                console.print(Panel(
                    f"[bold bright_red]‚ùå –ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞![/bold bright_red]\n"
                    f"[bright_red]üö´ –î–µ—Ç–∞–ª—ñ: {str(e)}[/bright_red]",
                    title="[bold bright_red]üö® –°–∏—Å—Ç–µ–º–Ω–∞ –ü–æ–º–∏–ª–∫–∞[/bold bright_red]",
                    border_style="bright_red"
                ))
        
        elif choice == "4":
            # –¶—ñ–ª—å–æ–≤–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
            try:
                target_ip = console.input(
                    "[bold bright_yellow]üéØ –í–≤–µ–¥—ñ—Ç—å IP –∞–¥—Ä–µ—Å—É –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: [/bold bright_yellow]"
                ).strip()
                
                # –í–∞–ª—ñ–¥–∞—Ü—ñ—è IP
                ipaddress.ip_address(target_ip)
                
                console.print(Panel(
                    f"[bold bright_cyan]üîç –°–∫–∞–Ω—É—é —Ü—ñ–ª—å–æ–≤–∏–π —Ö–æ—Å—Ç {target_ip}...[/bold bright_cyan]",
                    border_style="bright_cyan"
                ))
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å
                result = subprocess.run(
                    ["ping", "-c", "3", "-W", "2", target_ip],
                    stdout=subprocess.DEVNULL,
                    stderr=subprocess.DEVNULL,
                )
                
                if result.returncode == 0:
                    hostname = get_hostname(target_ip)
                    console.print(Panel(
                        f"[bold bright_green]‚úÖ –•–æ—Å—Ç {target_ip} –¥–æ—Å—Ç—É–ø–Ω–∏–π![/bold bright_green]\n"
                        f"[bright_green]üè∑Ô∏è Hostname: {hostname}[/bright_green]",
                        title="[bold bright_green]üéØ –¶—ñ–ª—å–æ–≤–∏–π –•–æ—Å—Ç[/bold bright_green]",
                        border_style="bright_green"
                    ))
                    
                    # –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø–æ—Ä—Ç—ñ–≤
                    open_ports = scan_ports_with_services(target_ip, 1, 65535)
                    display_port_results(target_ip, hostname, open_ports)
                    
                    results_history.append(('target_scan', target_ip, [(target_ip, open_ports)]))
                else:
                    console.print(Panel(
                        f"[bold bright_red]‚ùå –•–æ—Å—Ç {target_ip} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π![/bold bright_red]\n"
                        f"[bright_red]üîí –ú–æ–∂–ª–∏–≤–æ —Ö–æ—Å—Ç –≤–∏–º–∫–Ω–µ–Ω–∏–π –∞–±–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π[/bright_red]",
                        title="[bold bright_red]üéØ –¶—ñ–ª—å–æ–≤–∏–π –•–æ—Å—Ç[/bold bright_red]",
                        border_style="bright_red"
                    ))
                    
            except ValueError:
                console.print(Panel(
                    "[bold bright_red]‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ IP –∞–¥—Ä–µ—Å–∞![/bold bright_red]\n"
                    "[bright_red]üìù –§–æ—Ä–º–∞—Ç: 192.168.1.1[/bright_red]",
                    title="[bold bright_red]üö® –ü–æ–º–∏–ª–∫–∞ –í–≤–µ–¥–µ–Ω–Ω—è[/bold bright_red]",
                    border_style="bright_red"
                ))
            except Exception as e:
                console.print(Panel(
                    f"[bold bright_red]‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è![/bold bright_red]\n"
                    f"[bright_red]üö´ –î–µ—Ç–∞–ª—ñ: {str(e)}[/bright_red]",
                    title="[bold bright_red]üö® –ü–æ–º–∏–ª–∫–∞ –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è[/bold bright_red]",
                    border_style="bright_red"
                ))
        
        elif choice == "5":
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            show_statistics()
            
        elif choice == "6":
            # –ï–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            if not results_history:
                console.print(Panel(
                    "[bold bright_yellow]‚ö†Ô∏è –ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É![/bold bright_yellow]\n"
                    "[bright_yellow]üîç –í–∏–∫–æ–Ω–∞–π—Ç–µ —Å–ø–æ—á–∞—Ç–∫—É —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è[/bright_yellow]",
                    title="[bold bright_yellow]üíæ –ï–∫—Å–ø–æ—Ä—Ç –†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤[/bold bright_yellow]",
                    border_style="bright_yellow"
                ))
            else:
                filename = console.input(
                    "[bold bright_yellow]üìÅ –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ñ–∞–π–ª—É (–∞–±–æ Enter –¥–ª—è –∞–≤—Ç–æ): [/bold bright_yellow]"
                ).strip()
                
                if not filename:
                    filename = None
                
                save_results_to_file(results_history, filename)
        
        else:
            console.print(Panel(
                "[bold bright_red]‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä![/bold bright_red]\n"
                "[bright_red]üî¢ –û–±–µ—Ä—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 6[/bright_red]",
                title="[bold bright_red]üö® –ü–æ–º–∏–ª–∫–∞ –ú–µ–Ω—é[/bold bright_red]",
                border_style="bright_red"
            ))
        
        # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —ñ—Ç–µ—Ä–∞—Ü—ñ—î—é
        console.print()
        console.input("[bold bright_white]‚è∏Ô∏è –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...[/bold bright_white]")
        console.clear()
        print_header()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        console.print()
        console.print(Panel(
            "[bold bright_yellow]‚ö†Ô∏è –ü–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º![/bold bright_yellow]\n"
            "[bright_yellow]üëã –ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —á–µ—Ä–µ–∑ Ctrl+C[/bright_yellow]",
            title="[bold bright_yellow]‚ö° –ï–∫—Å—Ç—Ä–µ–Ω–µ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è[/bold bright_yellow]",
            border_style="bright_yellow",
            padding=(1, 2)
        ))
    except Exception as e:
        console.print(Panel(
            f"[bold bright_red]üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞![/bold bright_red]\n"
            f"[bright_red]üö´ –î–µ—Ç–∞–ª—ñ: {str(e)}[/bright_red]\n"
            f"[bright_red]üìß –ü–æ–≤—ñ–¥–æ–º—Ç–µ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É[/bright_red]",
            title="[bold bright_red]üö® –°–∏—Å—Ç–µ–º–Ω–∞ –ü–æ–º–∏–ª–∫–∞[/bold bright_red]",
            border_style="bright_red",
            padding=(1, 2)
        ))
    finally:
        console.print("[bold bright_cyan]üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è![/bold bright_cyan]")
